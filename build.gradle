import jdk.nashorn.internal.runtime.regexp.joni.Config

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "0.2.0"
group= "pl.pabilo8"
def archiveGroup = "pl.pabilo8"
archivesBaseName = "immersiveintelligence"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"

    replace "@VERSION@", project.version
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    useDepAts = true
}

repositories {
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    
    maven { // CraftTweaker
        name 'jared maven'
        url 'https://maven.blamejared.com/'
    }

    maven { // ModMaven, there is a bunch of stuff on there
        name 'ModMaven'
        url "https://modmaven.k-4u.nl/"
    }

    maven { // Albedo Lights
        url 'https://repo.elytradev.com/'
    }

    maven { // CTM
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }

    //https://www.cursemaven.com/
    //for Immersive Petroleum
    maven {
        url "https://www.cursemaven.com"
    }

    //Curseforge maven, in case some other maven goes offline
    repositories {
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }

}

dependencies {
    compileOnly "team.chisel.ctm:CTM:MC1.12.2-0.3.2.18"
    deobfCompile "blusunrize:ImmersiveEngineering:0.12-92-+"

    // compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_1.12.2:4.15.+:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_1.12.2:4.15.+"

    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.8.468"
    compileOnly "albedo:albedo:0.1.3"
    //Maybe someday...
    //deobfCompile "albedo:albedo:1.12.2:1.1.0"
    deobfCompile 'baubles:Baubles:1.12:1.5.2'

    compileOnly "curse.maven:immersive-petroleum-268250:2544919"

    testCompile ('org.junit.jupiter:junit-jupiter-api:5.4.+')
    testRuntime ('org.junit.jupiter:junit-jupiter-engine:5.4.+')
}

reobf {
    coreJar { mappingType = 'SEARGE' }
}
test {
    useJUnit()

    maxHeapSize = '1G'
}
task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include 'pl/pabilo8/immersiveintelligence/common/asm/**'
    }
    manifest {
        attributes "FMLCorePlugin": "pl.pabilo8.immersiveintelligence.common.asm.IILoadingPlugin"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + '-core:' + version
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStorePass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStorePass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}
build.dependsOn signMainJar
jar.dependsOn signCoreJar
def libPrefix = 'META-INF/libraries'

jar {
    manifest {
        attributes 'ContainedDeps': libPrefix + '/' + coreJar.archivePath.name
        attributes "FMLAT": "ImmersiveIntelligence_at.cfg"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + ':' + version
    }

    exclude 'pl/pabilo8/immersiveintelligence/common/asm/**'
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    //Exclude GIMP images
	exclude '**/*.xcf'
    //Exclude batch
    exclude '**/*.bat'
    //Exclude template textures
    exclude '**/*Template.png'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info and excluded files
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'

    }

}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'immersiveintelligence_at.cfg'
        attributes 'Maven-Artifact': group + ':' + archivesBaseName + ':' + version
    }
}

artifacts {
    archives deobfJar
}

//To use personalized options when working with the mod create a file named custom.gradle
//The file is not sychronised with GitHub and can be used i.e. to store username and password
//Thanks to BluSunrize for the idea (taken from IE)
def customGradle = rootProject.file('custom.gradle')
if (customGradle.exists()) {
    apply from: customGradle
}


